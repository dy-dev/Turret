//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : FlyingPawn.cpp
//  @ Date : 25/11/2021
//  @ Author : 
//
//


#include "Game/GameManager.h"
#include <raymath.h>
#include "Enemies/FlyingPawn.h"

FlyingPawn::FlyingPawn()
    :FlyingPawn(
        { (float)GetRandomValue(100, GameManager::SCREEN_WIDTH - 100),
        (float)GetRandomValue(100, GameManager::SCREEN_HEIGHT - 100) },
        0, 0, "./assets/textures/Enemy.png",
        Vector2Normalize({ (float)GetRandomValue(-100, 100), (float)GetRandomValue(-100, 100) }))
{

}

FlyingPawn::FlyingPawn(const Vector2& p_Position, const int p_iScreenWidth,
    const int p_iScreenHeight, const char* p_pcTexturePath, const Vector2& p_Direction)
    : FlyingEnemy{ p_Position, p_iScreenWidth, p_iScreenHeight, p_pcTexturePath, p_Direction }
    , MovableObjects{ p_Position, p_iScreenWidth, p_iScreenHeight, p_pcTexturePath, p_Direction }
    , GraphicObjects(p_Position, p_iScreenWidth, p_iScreenHeight, p_pcTexturePath)
{

}

void FlyingPawn::KamikazeAttack()
{
}



void FlyingPawn::update()
{
    GraphicObjects::m_DestinationRectangle.x += m_Direction.x * m_fSpeed;
    GraphicObjects::m_DestinationRectangle.y += m_Direction.y * m_fSpeed;
    GraphicObjects::m_BoundingRectangle.x += m_Direction.x * m_fSpeed;
    GraphicObjects::m_BoundingRectangle.y += m_Direction.y * m_fSpeed;

    bool modif = false;
    //If enemies goes to far on the left or right  of the window
    if (GraphicObjects::m_DestinationRectangle.x - GraphicObjects::m_CenterRotation.x< 0 ||
        GraphicObjects::m_DestinationRectangle.x + m_BackTexture.width - GraphicObjects::m_CenterRotation.x> GameManager::SCREEN_WIDTH)
    {
        m_Direction.x *= -1;
        modif = true;
    }

    if (GraphicObjects::m_DestinationRectangle.y - GraphicObjects::m_CenterRotation.y < 0 ||
        GraphicObjects::m_DestinationRectangle.y + m_BackTexture.height - GraphicObjects::m_CenterRotation.y >  GameManager::SCREEN_HEIGHT)
    {
        m_Direction.y *= -1;
        modif = true;
    }
    if (modif)
        GraphicObjects::m_fOrientation = Vector2Angle({}, m_Direction);
}

void FlyingPawn::draw()
{
    DrawRectangleLines(GraphicObjects::m_BoundingRectangle.x,
        GraphicObjects::m_BoundingRectangle.y,
        GraphicObjects::m_BoundingRectangle.width, GraphicObjects::m_BoundingRectangle.height, GREEN);

    DrawTexturePro(m_BackTexture, GraphicObjects::m_SourceRectangle,
        GraphicObjects::m_DestinationRectangle,
        { m_BackTexture.width / 2.f,
         m_BackTexture.height / 2.f },
        GraphicObjects::m_fOrientation - 45, WHITE);
    DrawTexturePro(GraphicObjects::m_Texture, GraphicObjects::m_SourceRectangle,
        GraphicObjects::m_DestinationRectangle,
        { GraphicObjects::m_Texture.width / 2.f,
        GraphicObjects::m_Texture.height / 2.f },
        GraphicObjects::m_fOrientation - 45, m_Tint);
}
